/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef corenlp_TYPES_H
#define corenlp_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _ParseTree__isset {
  _ParseTree__isset() : tree(false), score(false) {}
  bool tree;
  bool score;
} _ParseTree__isset;

class ParseTree {
 public:

  static const char* ascii_fingerprint; // = "C712EF0DA8599E55DF4D0F13415232EF";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x12,0xEF,0x0D,0xA8,0x59,0x9E,0x55,0xDF,0x4D,0x0F,0x13,0x41,0x52,0x32,0xEF};

  ParseTree() : tree(), score(0) {
  }

  virtual ~ParseTree() throw() {}

  std::string tree;
  double score;

  _ParseTree__isset __isset;

  void __set_tree(const std::string& val) {
    tree = val;
  }

  void __set_score(const double val) {
    score = val;
  }

  bool operator == (const ParseTree & rhs) const
  {
    if (!(tree == rhs.tree))
      return false;
    if (!(score == rhs.score))
      return false;
    return true;
  }
  bool operator != (const ParseTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParseTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ParseTree &a, ParseTree &b);

typedef struct _NamedEntity__isset {
  _NamedEntity__isset() : entity(false), tag(false), startOffset(false), endOffset(false) {}
  bool entity;
  bool tag;
  bool startOffset;
  bool endOffset;
} _NamedEntity__isset;

class NamedEntity {
 public:

  static const char* ascii_fingerprint; // = "E9A7EEE9A2D27F7A70E08E1F60A257DB";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0xA7,0xEE,0xE9,0xA2,0xD2,0x7F,0x7A,0x70,0xE0,0x8E,0x1F,0x60,0xA2,0x57,0xDB};

  NamedEntity() : entity(), tag(), startOffset(0), endOffset(0) {
  }

  virtual ~NamedEntity() throw() {}

  std::string entity;
  std::string tag;
  int32_t startOffset;
  int32_t endOffset;

  _NamedEntity__isset __isset;

  void __set_entity(const std::string& val) {
    entity = val;
  }

  void __set_tag(const std::string& val) {
    tag = val;
  }

  void __set_startOffset(const int32_t val) {
    startOffset = val;
  }

  void __set_endOffset(const int32_t val) {
    endOffset = val;
  }

  bool operator == (const NamedEntity & rhs) const
  {
    if (!(entity == rhs.entity))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(startOffset == rhs.startOffset))
      return false;
    if (!(endOffset == rhs.endOffset))
      return false;
    return true;
  }
  bool operator != (const NamedEntity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamedEntity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NamedEntity &a, NamedEntity &b);

typedef struct _TaggedToken__isset {
  _TaggedToken__isset() : tag(false), token(false) {}
  bool tag;
  bool token;
} _TaggedToken__isset;

class TaggedToken {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TaggedToken() : tag(), token() {
  }

  virtual ~TaggedToken() throw() {}

  std::string tag;
  std::string token;

  _TaggedToken__isset __isset;

  void __set_tag(const std::string& val) {
    tag = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const TaggedToken & rhs) const
  {
    if (!(tag == rhs.tag))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const TaggedToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaggedToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaggedToken &a, TaggedToken &b);


class SerializedException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SerializedException() : payload() {
  }

  virtual ~SerializedException() throw() {}

  std::string payload;

  void __set_payload(const std::string& val) {
    payload = val;
  }

  bool operator == (const SerializedException & rhs) const
  {
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const SerializedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SerializedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SerializedException &a, SerializedException &b);



#endif
