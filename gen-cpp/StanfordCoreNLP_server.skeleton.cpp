// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "StanfordCoreNLP.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ;

class StanfordCoreNLPHandler : virtual public StanfordCoreNLPIf {
 public:
  StanfordCoreNLPHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void zip() {
    // Your implementation goes here
    printf("zip\n");
  }

  void parse_text(std::vector<ParseTree> & _return, const std::string& text, const std::vector<std::string> & outputFormat) {
    // Your implementation goes here
    printf("parse_text\n");
  }

  void parse_tokens(ParseTree& _return, const std::vector<std::string> & tokens, const std::vector<std::string> & outputFormat) {
    // Your implementation goes here
    printf("parse_tokens\n");
  }

  void parse_tagged_sentence(ParseTree& _return, const std::string& taggedSentence, const std::vector<std::string> & outputFormat, const std::string& divider) {
    // Your implementation goes here
    printf("parse_tagged_sentence\n");
  }

  void lexicalize_parse_tree(std::string& _return, const std::string& tree) {
    // Your implementation goes here
    printf("lexicalize_parse_tree\n");
  }

  void get_entities_from_text(std::vector<NamedEntity> & _return, const std::string& text) {
    // Your implementation goes here
    printf("get_entities_from_text\n");
  }

  void get_entities_from_tokens(std::vector<NamedEntity> & _return, const std::vector<std::string> & tokens) {
    // Your implementation goes here
    printf("get_entities_from_tokens\n");
  }

  void get_entities_from_trees(std::vector<NamedEntity> & _return, const std::vector<std::string> & trees) {
    // Your implementation goes here
    printf("get_entities_from_trees\n");
  }

  void resolve_coreferences_in_text(std::vector<std::string> & _return, const std::string& text) {
    // Your implementation goes here
    printf("resolve_coreferences_in_text\n");
  }

  void resolve_coreferences_in_tokenized_sentences(std::vector<std::string> & _return, const std::vector<std::string> & sentencesWithTokensSeparatedBySpace) {
    // Your implementation goes here
    printf("resolve_coreferences_in_tokenized_sentences\n");
  }

  void resolve_coreferences_in_trees(std::vector<std::string> & _return, const std::vector<std::string> & trees) {
    // Your implementation goes here
    printf("resolve_coreferences_in_trees\n");
  }

  void evaluate_tregex_pattern(std::vector<std::string> & _return, const std::string& parseTree, const std::string& tregexPattern) {
    // Your implementation goes here
    printf("evaluate_tregex_pattern\n");
  }

  void tag_text(std::vector<std::vector<TaggedToken> > & _return, const std::string& untokenizedText) {
    // Your implementation goes here
    printf("tag_text\n");
  }

  void tag_tokenized_sentence(std::vector<TaggedToken> & _return, const std::vector<std::string> & tokenizedSentence) {
    // Your implementation goes here
    printf("tag_tokenized_sentence\n");
  }

  void untokenize_sentence(std::string& _return, const std::vector<std::string> & sentenceTokens) {
    // Your implementation goes here
    printf("untokenize_sentence\n");
  }

  void tokenize_text(std::vector<std::vector<std::string> > & _return, const std::string& arbitraryText) {
    // Your implementation goes here
    printf("tokenize_text\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<StanfordCoreNLPHandler> handler(new StanfordCoreNLPHandler());
  shared_ptr<TProcessor> processor(new StanfordCoreNLPProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

